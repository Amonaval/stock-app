{"version":3,"sources":["StockList.js","App.js","index.js"],"names":["StockList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getlastUpdateVal","item","displayFormat","lastUpdate","timeDiff","Math","abs","Date","getTime","date","hours","parseInt","mins","ceil","concat","itemDate","getHours","lastupdateMins","getMinutes","lastupdateSecs","getSeconds","listItems","stockData","state","tabItems","toConsumableArray","getOwnPropertyNames","map","stockDataItem","react_default","a","createElement","key","stockName","bgcolor","color","stockPrice","percentageChange","className","displayDate","prevProps","_this2","stockDataList","objectSpread","dataTick","forEach","index","currentStock","round","toFixed","newItem","setState","Component","App","connectionState","socket","WebSocket","readyState","onclose","onmessage","message","modifiedItems","stockList","data","JSON","parse","i","obj","push","src_StockList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.03aa18aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass StockList extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockData: {}\r\n    }\r\n  }\r\n\r\n  getlastUpdateVal = (item, displayFormat) => {\r\n       let lastUpdate = '';\r\n\r\n       // Below diff is calculated here to switch the case of format\r\n       // for customize condition\r\n       // e.g if hours > 2 show textFormat/timeFormat\r\n\r\n       const timeDiff = Math.abs(new Date().getTime() - item.date);\r\n       // const days = parseInt((timeDiff / (1000 * 3600)) % 24, 10);  \r\n       const hours = parseInt(timeDiff / (1000 * 3600), 10); \r\n       const mins =  Math.ceil((timeDiff / (1000 * 3600)) % 60, 10);\r\n       \r\n       switch(displayFormat){\r\n          case 'textFomat':\r\n              // Format like - few secs before, x min before, x hr y min before\r\n              if(mins) {\r\n                lastUpdate = (hours === 0 && mins < 2) ? 'few secs' : `${mins} min `;\r\n              }\r\n              if(hours) {\r\n                lastUpdate += `${hours} hr`;\r\n              }\r\n              lastUpdate +=  '  before';\r\n              break;\r\n          case 'timeFormat':\r\n              const itemDate = new Date(item.date);\r\n              lastUpdate = itemDate.getHours();\r\n              let lastupdateMins = itemDate.getMinutes();\r\n              let lastupdateSecs = itemDate.getSeconds();\r\n              if (lastUpdate / 12 > 1) {\r\n                lastUpdate = `${lastUpdate % 12} : ${lastupdateMins} : ${lastupdateSecs} pm `;\r\n              } else {\r\n                lastUpdate = `${lastUpdate} : ${lastupdateMins} : ${lastupdateSecs} am`;\r\n              }\r\n              break;\r\n          default:\r\n             break;\r\n       }\r\n      return lastUpdate;\r\n  }\r\n\r\n  componentWillReceiveProps(prevProps) {\r\n    let stockDataList = {...this.state.stockData};\r\n    let currentProps = this.props.dataTick;\r\n    currentProps.forEach((item, index) => {\r\n      var currentStock = stockDataList[item.stockName];\r\n      if(currentStock) {\r\n        // Change color for positive & negative price change\r\n        if(currentStock.stockPrice < item.stockPrice) {  \r\n          currentStock.color = '#CD5C5C';\r\n        }\r\n        if(currentStock.stockPrice > item.stockPrice) {\r\n          currentStock.color = '#90EE90';\r\n        }\r\n        let lastUpdate = this.getlastUpdateVal(currentStock, 'timeFormat');\r\n        const percentageChange = Math.round((1-(currentStock.stockPrice/item.stockPrice))*100).toFixed(2);\r\n\r\n        currentStock.date = item.date;\r\n        currentStock.displayDate = lastUpdate;\r\n        currentStock.stockPrice = Math.round(item.stockPrice).toFixed(3);\r\n        currentStock[item.stockName] = Math.round(item.stockPrice).toFixed(3);\r\n        currentStock.percentageChange = `${percentageChange} %`;\r\n      } else {\r\n        let newItem = item;\r\n        stockDataList[item.stockName] = newItem;\r\n        stockDataList[item.stockName].displayDate =  this.getlastUpdateVal(item, 'timeFormat');;\r\n        stockDataList[item.stockName].stockPrice = Math.round(item.stockPrice).toFixed(3);\r\n      }\r\n    });\r\n\r\n    this.setState({stockData: stockDataList});\r\n  }\r\n  \r\n  listItems = () => {\r\n    const stockData = this.state.stockData;\r\n    const itemArr = [...Object.getOwnPropertyNames(stockData)];\r\n    const tabItems = itemArr.map(item => {\r\n      const stockDataItem = stockData[item];\r\n      return (<tr key={stockDataItem.stockName}>\r\n        <td>{stockDataItem.stockName}</td>\r\n        <td bgcolor={stockDataItem.color}>{stockDataItem.stockPrice}</td>\r\n        <td color={stockDataItem.color}>{stockDataItem.percentageChange}</td>\r\n        <td className=\"update-date\">{stockDataItem.displayDate}</td>\r\n      </tr>)\r\n    });\r\n\r\n    return (\r\n        <table>\r\n          <tbody>\r\n            <tr><th>Ticker</th><th>Price</th><th>% change</th><th>Last Update</th></tr>\r\n            {tabItems}\r\n          </tbody>\r\n        </table>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stock-list\">\r\n        {this.listItems()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockList;\r\n","import React, { Component } from 'react';\r\nimport StockList from './StockList'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stockData: [],\r\n      connectionState: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const websocketurl = \"ws://stocks.mnet.website\";\r\n    const socket = new WebSocket(websocketurl);\r\n    this.setState({connectionState: socket.readyState})\r\n    socket.onclose = () => this.setState({connectionState: socket.readyState});\r\n    socket.onmessage = (message) => {\r\n      this.setState({connectionState: socket.readyState})\r\n      let modifiedItems = [];\r\n      const stockList = message && message.data && JSON.parse(message.data);\r\n      stockList && stockList.forEach((data, i) => {\r\n        let obj = {}\r\n        obj.stockName = data[0];\r\n        obj.stockPrice = data[1];\r\n        obj[data[0]] = data[1];\r\n        obj.color = '';\r\n        obj.date = new Date().getTime();\r\n        modifiedItems.push(obj);\r\n      })\r\n\r\n      this.setState((state, props) => ({\r\n        stockData: modifiedItems\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {this.state.connectionState === 1 && <div className=\"stock-analyze\">\r\n            <h2>Live Stock Ticker App</h2>\r\n              <StockList dataTick={this.state.stockData} />\r\n          </div>}\r\n          {this.state.connectionState > 1 && <div>\r\n             Unable to establish socket connection. Please check internet or \r\n             proxy settings of your machine\r\n          </div>}\r\n          {this.state.connectionState === 0 && <div>\r\n             Connecting...\r\n          </div>}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}